<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xiang's Blog]]></title>
  <link href="http://javajavadog.github.io/atom.xml" rel="self"/>
  <link href="http://javajavadog.github.io/"/>
  <updated>2015-01-05T12:29:37+08:00</updated>
  <id>http://javajavadog.github.io/</id>
  <author>
    <name><![CDATA[Xiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android一般应用程序的启动过程]]></title>
    <link href="http://javajavadog.github.io/blog/2015/01/05/android%5B%3F%5D-ban-ying-yong-cheng-xu-de-qi-dong-guo-cheng/"/>
    <updated>2015-01-05T12:28:12+08:00</updated>
    <id>http://javajavadog.github.io/blog/2015/01/05/android[?]-ban-ying-yong-cheng-xu-de-qi-dong-guo-cheng</id>
    <content type="html"><![CDATA[<p>Android一般应用程序的启动过程</p>

<p>任何应用程序都有一个启动的入口。例如机器语言的应用程序，入口即是和硬件约定好的数据摆放位置，汇编语言则一般是寄存器中指令指针所指的位置，C语言一般是main方法，Java则是static main方法。</p>

<p>Android应用程序的启动入口，在开发者看来好像是Activity里面的onCreate()方法。</p>

<p>本文想分析的是，在点击Launcher上面的icon后，onCreate()之前，到底发生了什么。C层的东西，如何创建进程之类的，暂时不分析(zygote这名字取得蛮有创意)，我们从Java代码开始。</p>

<!--more-->


<p>ActivityThread
这个类是很重要的入口类，在这里我们也可以看到熟悉的public static void main(String[] args)方法。</p>

<p>main执行后，执行了一个重要的方法prepareMainLooper()，该方法配合线程本地存储，给本线程创建了一个MessageQueue，并且让本线程成为了主线程，也是我们常说的UI线程。</p>

<p>prepareMainLooper()之后，实例化了ActivityThread，实例化ActivityThread的时候，同时实例化了H类和ApplicationThread类，H类是一个Handler，ApplicationThread类是一个Binder。此时的H类所对应的Looper是MainLooper。</p>

<p>实例化ActivityThread之后，执行了一个重要的方法activityThread.attach()。attach时把前面的ApplicationThread类作为Binder丢给了Runtime，接收ActivityManagerService的IPC消息，当IPC消息来的时候，实际上ApplicationThread并不会直接处理，而是通过前面的H类将消息丢到MainLooper的MessageQueue中，等待执行。</p>

<p>接下来会执行到Looper.loop()方法，该方法会将MainLooper对应MessageQueue中的消息拿出来处理，并一直循环下去。</p>

<p>ActivityManagerService发送启动Activity的指令，前面的ApplicationThread将其通过H丢到MessageQueue中，Looper执行它来启动Activity。</p>

<p>接下来就到了H中的handleLaunchActivity，终于Activity要启动了。通过java的newInstance方式创建出了activity的实例（原来activity是这里new出来的）。启动Activity的时候，会检查是否有了Application，如果没有就创建并启动一个，就是那个我们常用的放全局变量的东西。</p>

<p>activity有了之后，又执行了一个重要方法，activity.attach()，此方法创建了Window类并绑到了WindowManager，这个Window是一个PhoneWindow，PhoneWindow有一个继承于FrameLayout的DecorView，这个东西就是显示我们UI的容器了。创建DecorView的时候，会根据后面set的主题等创建出Title，Background等。</p>

<p>然后是setTheme，performCreate，performStart……我们会实现对应的onCreate()，onStart()……你懂的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog迁徙到github]]></title>
    <link href="http://javajavadog.github.io/blog/2015/01/05/blogqian-xi-dao-github/"/>
    <updated>2015-01-05T10:46:59+08:00</updated>
    <id>http://javajavadog.github.io/blog/2015/01/05/blogqian-xi-dao-github</id>
    <content type="html"><![CDATA[<p>Congratulations!</br></br>
Blog乔迁到了github。</p>
]]></content>
  </entry>
  
</feed>
